// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // Optional for social login users
  name          String?
  avatar        String?
  role          UserRole  @default(USER)
  emailVerified Boolean   @default(false)
  
  // Password reset
  passwordResetToken   String?
  passwordResetExpires DateTime?
  
  // Email verification
  emailVerificationToken String?
  
  // Stripe customer integration
  stripeCustomerId String? @unique
  
  // Social accounts
  socialAccounts SocialAccount[]
  
  // Refresh tokens
  refreshTokens RefreshToken[]
  
  // Subscriptions
  subscriptions Subscription[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model SocialAccount {
  id         String   @id @default(cuid())
  provider   Provider
  providerId String   // OAuth provider's user ID
  email      String?
  name       String?
  avatar     String?
  
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([provider, providerId])
  @@map("social_accounts")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Provider {
  GOOGLE
  GITHUB
  FACEBOOK
  TWITTER
  DISCORD
  LINKEDIN
}

model SubscriptionPlan {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  stripePriceId     String   @unique
  stripeProductId   String
  amount            Int      // Price in cents
  currency          String   @default("usd")
  interval          BillingInterval
  intervalCount     Int      @default(1)
  trialDays         Int?     // Trial period in days
  features          Json?    // JSON array of features
  maxUsers          Int?     // Usage limits
  maxProjects       Int?
  maxStorage        BigInt?  // Storage limit in bytes
  popular           Boolean  @default(false)
  active            Boolean  @default(true)
  
  // Relations
  subscriptions     Subscription[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("subscription_plans")
}

model Subscription {
  id                    String            @id @default(cuid())
  userId                String
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId                String
  plan                  SubscriptionPlan  @relation(fields: [planId], references: [id])
  
  // Stripe integration
  stripeSubscriptionId  String            @unique
  stripeCustomerId      String
  stripePriceId         String
  
  // Subscription details
  status                SubscriptionStatus
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean           @default(false)
  canceledAt            DateTime?
  trialStart            DateTime?
  trialEnd              DateTime?
  
  // Billing
  amount                Int               // Amount in cents
  currency              String            @default("usd")
  interval              BillingInterval
  intervalCount         Int               @default(1)
  
  // Usage tracking
  usageResetDate        DateTime?
  metadata              Json?             // Store additional data
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@map("subscriptions")
}

model WebhookEvent {
  id            String   @id @default(cuid())
  stripeEventId String   @unique
  eventType     String
  processed     Boolean  @default(false)
  data          Json
  processingError String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("webhook_events")
}

enum BillingInterval {
  MONTH
  YEAR
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
} 